// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace CockaIO.Models
{
    public partial class CockaioContext : DbContext
    {
        public CockaioContext()
        {
        }

        public CockaioContext(DbContextOptions<CockaioContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Cars> Cars { get; set; }
        public virtual DbSet<UserCar> UserCar { get; set; }
        public virtual DbSet<Users> Users { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                //("8.0.21-mysql")
                //Microsoft.EntityFrameworkCore.Infrastructure.MySqlDbContextOptionsBuilder mySqlDbContextOptionsBuilder = new Microsoft.EntityFrameworkCore.Infrastructure.MySqlDbContextOptionsBuilder(optionsBuilder);
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseMySql("server=localhost;user id=root;password=mclarenF1!;persistsecurityinfo=True;database=cockaio");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Cars>(entity =>
            {
                entity.HasKey(e => e.Idcar)
                    .HasName("PRIMARY");

                entity.ToTable("cars");

                entity.Property(e => e.Idcar).HasColumnName("idcar");

                entity.Property(e => e.Brand)
                    .IsRequired()
                    .HasColumnType("varchar(45)")
                    .HasColumnName("brand")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasColumnType("varchar(45)")
                    .HasColumnName("model")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.UrlImage)
                    .HasColumnType("varchar(150)")
                    .HasColumnName("url_image")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.Year).HasColumnName("year");
            });

            modelBuilder.Entity<UserCar>(entity =>
            {
                entity.HasKey(e => new { e.Iduser, e.Idcar })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.ToTable("user_car");

                entity.HasIndex(e => e.Idcar, "fk_usercar_car_idx");

                entity.Property(e => e.Iduser).HasColumnName("iduser");

                entity.Property(e => e.Idcar).HasColumnName("idcar");

                entity.Property(e => e.BoughtOn)
                    .HasColumnType("date")
                    .HasColumnName("bought_on");

                entity.Property(e => e.CarColor)
                    .HasColumnType("varchar(45)")
                    .HasColumnName("car_color")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.Plate)
                    .HasColumnType("varchar(45)")
                    .HasColumnName("plate")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.HasOne(d => d.IdcarNavigation)
                    .WithMany(p => p.UserCar)
                    .HasForeignKey(d => d.Idcar)
                    .HasConstraintName("fk_usercar_car");

                entity.HasOne(d => d.IduserNavigation)
                    .WithMany(p => p.UserCar)
                    .HasForeignKey(d => d.Iduser)
                    .HasConstraintName("fk_usercar_user");
            });

            modelBuilder.Entity<Users>(entity =>
            {
                entity.HasKey(e => e.Iduser)
                    .HasName("PRIMARY");

                entity.ToTable("users");

                entity.Property(e => e.Iduser).HasColumnName("iduser");

                entity.Property(e => e.Age).HasColumnName("age");

                entity.Property(e => e.Lastname)
                    .IsRequired()
                    .HasColumnType("varchar(45)")
                    .HasColumnName("lastname")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("varchar(45)")
                    .HasColumnName("name")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}